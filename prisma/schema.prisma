// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




// model post {
//   id   Int  @id @default(autoincrement())
//   title String
//   content String
//   published Boolean @default(false)
//   author String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("posts")
// }


model post {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  published  Boolean  @default(false)
  authorId   Int
  author     user     @relation(fields: [authorId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  postcategory postcategory[]

  @@map("posts")
}

model user {
  id       Int       @id @default(autoincrement())
  username String
  email    String
  age  Int @default(0)
  role     userenum @default(user)
  profile  profile?
  posts    post[]

  @@map("users")
}


model profile {
  id     Int    @id @default(autoincrement())
  bio    String?
  userId Int    @unique
  user   user   @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model category{
  id Int @id @default(autoincrement())
  name String
  postcategory postcategory[]

  @@map("categorys")
}

model postcategory{
  postId Int
  post post @relation(fields: [postId] , references: [id])
  categoryId Int
  category category @relation(fields: [categoryId] , references: [id])

  @@id([postId , categoryId])
  @@map("post_categories")
}

enum userenum {
  user
  admin
}
